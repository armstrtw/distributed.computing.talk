\documentclass[10pt,final]{beamer}
\mode<presentation>
\usetheme{debian}

\ifdefined\knitrout
  \renewenvironment{knitrout}{\begin{footnotesize}}{\end{footnotesize}}
\else
\fi

\usepackage{ulem}
\usepackage{amsmath}
\usepackage{url}
\usepackage{hyperref}
\usepackage{setspace}
\usepackage{verbatim}
\usepackage{color}
\usepackage{xcolor}
\usepackage{caption}
\usepackage{listings}

\definecolor{mygreen}{rgb}{0,0.6,0}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}

\lstset{ %
  backgroundcolor=\color{white},   % choose the background color; you must add \usepackage{color} or \usepackage{xcolor}
  basicstyle=\footnotesize,        % the size of the fonts that are used for the code
  breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
  breaklines=false,                 % sets automatic line breaking
  captionpos=b,                    % sets the caption-position to bottom
  commentstyle=\color{mygreen},    % comment style
  escapeinside={\%*}{*)},          % if you want to add LaTeX within your code
  %frame=single,                    % adds a frame around the code
  keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)
  keywordstyle=\color{blue},       % keyword style
  language=C++,                 % the language of the code
  numbers=left,                    % where to put the line-numbers; possible values are (none, left, right)
  numbersep=3pt,                   % how far the line-numbers are from the code
  numberstyle=\tiny\color{mygray}, % the style that is used for the line-numbers
  rulecolor=\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
  %showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
  showstringspaces=false,          % underline spaces within strings only
  %showtabs=false,                  % show tabs within strings adding particular underscores
  stepnumber=1,                    % the step between two line-numbers. If it's 1, each line will be numbered
  stringstyle=\color{mymauve},     % string literal style
  tabsize=2,                       % sets default tabsize to 2 spaces
  %title=\lstname                   % show the filename of files included with \lstinputlisting; also try caption instead of title
}

\hypersetup{pdftitle={Distributed Computing Tutorial},bookmarks}
\title{Distributed Computing Patterns in R}
\date{May 17, 2013}

\author[]{Whit Armstrong\\{\small\texttt{armstrong.whit@gmail.com}}}
\institute{KLS Diversified Asset Management}

<<setup, include=FALSE>>=
opts_chunk$set(size='footnotesize',progress=TRUE,verbose=TRUE)
## pre-require RProtoBuf so we don't get the messages
require(RProtoBuf,quietly=TRUE)
require(rzmq)
ctx <- init.context()
@ 

\begin{document}

\frame{\titlepage}

\begin{frame}[fragile]{Messaging patterns}
  \begin{itemize}
    \item Messaging patterns are ways of combining sockets to communicate effectively.
    \item In a messaging pattern each socket has a defined role and fulfills the responsibilities of that role.
    \item ZMQ offers several built-in messaging patterns which make it easy to rapidly design a distributed application:
      \begin{itemize}
      \item Request-reply, which connects a set of clients to a set of services.
      \item Pub-sub, which connects a set of publishers to a set of subscribers.
      \item Pipeline, which connects nodes in a fan-out/fan-in pattern that can have multiple steps and loops.
      \item Exclusive pair, which connects two sockets exclusively.
      \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{What does ZMQ give us?}
  \begin{itemize}
  \item ZMQ is a highly specialized networking toolkit.
  \item It implements the basics of socket communications while letting the user focus on the application.
  \item Very complex messaging patterns can be built on top of these simple ZMQ sockets (Paranoid Pirate, Majordomo, Binary Star, Suicidal Snail, etc.).
  \item I highly recommend reading ``The Guide'' before writing your own apps.
  \item \url{http://zguide.zeromq.org/page:all} 
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Request / Reply example}
  \begin{itemize}
  \item Req / Rep is the most basic message pattern.
  \item Both the request socket and reply socket are synchronous.
  \item The reply socket can only service one request at a time, however, many clients may connect to it and queue requests.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Request / Reply, Server}
<<eval=FALSE,echo=TRUE>>=
require(rzmq)

ctx <- init.context()
responder <- init.socket(ctx,"ZMQ_REP")
bind.socket(responder, "tcp://*:5555")

while (1) {
    req <- receive.socket(responder)
    send.socket(responder, "World")
}

@ 
\end{frame}

\begin{frame}[fragile,shrink]{Request / Reply, Client}
<<echo=TRUE>>=
require(rzmq)

requester <-  init.socket(ctx,"ZMQ_REQ")
connect.socket(requester, "tcp://localhost:5555")

for(request.number in 1:5) {
    print(paste("Sending Hello", request.number))
    send.socket(requester, "Hello")
    reply <- receive.socket(requester)
    print(paste("Received:",reply,"number",request.number))
}

@ 

\end{frame}

\begin{frame}[fragile]{Request / Reply server as remote procedure call}
<<eval=FALSE,echo=TRUE>>=
require(rzmq)

ctx <- init.context()
responder <- init.socket(ctx,"ZMQ_REP")
bind.socket(responder, "tcp://*:5557")

while (1) {
    req <- receive.socket(responder)
    send.socket(responder, req * req)
}
@ 
\end{frame}


\begin{frame}[fragile]{Request / Reply client as remote procedure call}
<<echo=TRUE>>=
require(rzmq)

requester <-  init.socket(ctx,"ZMQ_REQ")
connect.socket(requester, "tcp://localhost:5557")

x <- 10
send.socket(requester, x)
reply <- receive.socket(requester)
all.equal(x*x,reply)
print(reply)
@ 
\end{frame}

\begin{frame}[fragile]{Request / Reply client -- rpc server with user function}
<<eval=FALSE,echo=TRUE>>=
require(rzmq)

ctx <- init.context()
responder <- init.socket(ctx,"ZMQ_REP")
bind.socket(responder, "tcp://*:5558")

while (1) {
    msg <- receive.socket(responder)
    fun <- msg$fun
    args <- msg$args
    result <- do.call(fun,args)
    send.socket(responder, result)
}
@ 
\end{frame}


\begin{frame}[fragile]{Request / Reply client -- rpc client with user function}
<<echo=TRUE>>=
require(rzmq)

requester <-  init.socket(ctx,"ZMQ_REQ")
connect.socket(requester, "tcp://localhost:5558")

foo <- function(x) { x * pi }
req <- list(fun=foo,args=list(x=100))
send.socket(requester, req)
reply <- receive.socket(requester)
print(reply)
@ 
\end{frame}

\begin{frame}[fragile,shrink]{Realistic example -- c++ server}
  \lstinputlisting[language=C++]{code/proto.example/broker.cpp}
\end{frame}

\begin{frame}[fragile,shrink]{Realistic example -- R client}
<<echo=TRUE>>=
broker <- init.socket(ctx,"ZMQ_REQ")
connect.socket(broker, "tcp://*:5559")

## read the proto file
readProtoFiles(files=c("code/proto.example/order.proto","code/proto.example/fill.proto"))

aapl.order <- new(tutorial.Order,
                  symbol = "AAPL",
                  price = 600.9,
                  size = 100L
                  )

aapl.bytes <- serialize(aapl.order, NULL)

## send order
send.socket(broker, aapl.bytes, serialize=FALSE)

## pull back fill information
appl.fill.bytes <- receive.socket(broker,unserialize=FALSE)
appl.fill <- tutorial.Fill$read(appl.fill.bytes)
writeLines(as.character(appl.fill))
@ 

\end{frame}

\begin{frame}[fragile]{Pub / Sub example}
  \begin{itemize}
  \item Pub / Sub is a more interesting pattern.
  \item The Pub socket is asynchronous, but the sub socket is synchronous.
  \end{itemize}
\end{frame}

\begin{frame}[fragile,shrink]{Pub / Sub, Server}
<<eval=FALSE,echo=TRUE>>=
require(rzmq)

context = init.context()
pub.socket = init.socket(context,"ZMQ_PUB")
bind.socket(pub.socket,"tcp://*:5556")

node.names <- c("2yr","5yr","10yr")
usd.base.curve <- structure(rep(2,length(node.names)),names=node.names)
eur.base.curve <- structure(rep(1,length(node.names)),names=node.names)

while(1) {
    ## updates to USD swaps
    new.usd.curve <- usd.base.curve + rnorm(length(usd.base.curve))/100
    send.raw.string(pub.socket,"USD-SWAPS",send.more=TRUE)
    send.socket(pub.socket,new.usd.curve)

    ## updates to EUR swaps
    new.eur.curve <- eur.base.curve + rnorm(length(eur.base.curve))/100
    send.raw.string(pub.socket,"EUR-SWAPS",send.more=TRUE)
    send.socket(pub.socket,new.eur.curve)
}

@ 
\end{frame}

\begin{frame}[fragile,shrink]{Pub / Sub, USD Client}
<<echo=TRUE>>=
require(rzmq)

subscriber = init.socket(ctx,"ZMQ_SUB")
connect.socket(subscriber,"tcp://localhost:5556")
topic <- "USD-SWAPS"
subscribe(subscriber,topic)

i <- 0
while(i < 5) {
    ## throw away the topic msg
    res.topic <- receive.string(subscriber)
    if(get.rcvmore(subscriber)) {
        res <- receive.socket(subscriber)
        print(res)
    }
    i <- i + 1
}

@ 

\end{frame}

\begin{frame}[fragile,shrink]{Pub / Sub, EUR Client}
<<echo=TRUE>>=
require(rzmq)

subscriber = init.socket(ctx,"ZMQ_SUB")
connect.socket(subscriber,"tcp://localhost:5556")
topic <- "EUR-SWAPS"
subscribe(subscriber,topic)
i <- 0
while(i < 5) {
    ## throw away the topic msg
    res.topic <- receive.string(subscriber)
    if(get.rcvmore(subscriber)) {
        res <- receive.socket(subscriber)
        print(res)
    }
    i <- i + 1
}

@ 
\end{frame}

\begin{frame}[fragile,shrink]{Obligatory  deathstar example}
<<eval=TRUE,echo=TRUE>>=
require(deathstar,quietly=TRUE)

estimatePi <- function(seed) {
    set.seed(seed)
    numDraws <- 1e4
    r <- .5
    x <- runif(numDraws, min=-r, max=r)
    y <- runif(numDraws, min=-r, max=r)
    inCircle <- ifelse( (x^2 + y^2)^.5 < r , 1, 0)
    sum(inCircle) / length(inCircle) * 4
}

cluster <- c("localhost")
run.time <-
    system.time(ans <-
                zmq.cluster.lapply(cluster=cluster,
                                   as.list(1:1e3),
                                   estimatePi))

print(mean(unlist(ans)))
print(run.time)
print(attr(ans,"execution.report"))

@
\end{frame}

\begin{frame}[fragile,shrink]{doDeathstar foreach example}
<<eval=TRUE,echo=TRUE>>=
require(doDeathstar,quietly=TRUE)
registerDoDeathstar("localhost")

z <- foreach(i=1:100) %dopar% {
    set.seed(i)
    numDraws <- 1e4
    r <- .5
    x <- runif(numDraws, min=-r, max=r)
    y <- runif(numDraws, min=-r, max=r)
    inCircle <- ifelse( (x^2 + y^2)^.5 < r , 1, 0)
    sum(inCircle) / length(inCircle) * 4
}

print(mean(unlist(z)))
@ 

\end{frame}


\begin{frame}{Thanks for listening!}
    Many people contributed ideas and helped debug work in progress as the rzmq package was being developed.\\
    \medskip
    Bryan Lewis for collaborating and planning this talk with me.\\
    JD Long for my excessive reuse of the estimatePi example.\\
    Kurt Hornik for putting up with my packaging.\\
    John Laing for finding bugs in my code.\\
    Prof Brian Ripley for just being himself.\\
\end{frame}

\end{document}
