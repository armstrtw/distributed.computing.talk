// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fill.proto

#ifndef PROTOBUF_fill_2eproto__INCLUDED
#define PROTOBUF_fill_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fill_2eproto();
void protobuf_AssignDesc_fill_2eproto();
void protobuf_ShutdownFile_fill_2eproto();

class Fill;

// ===================================================================

class Fill : public ::google::protobuf::Message {
 public:
  Fill();
  virtual ~Fill();
  
  Fill(const Fill& from);
  
  inline Fill& operator=(const Fill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fill& default_instance();
  
  void Swap(Fill* other);
  
  // implements Message ----------------------------------------------
  
  Fill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fill& from);
  void MergeFrom(const Fill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline double timestamp() const;
  inline void set_timestamp(double value);
  
  // required string symbol = 2;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  
  // required double price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline double price() const;
  inline void set_price(double value);
  
  // required int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tutorial.Fill)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_size();
  inline void clear_has_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double timestamp_;
  ::std::string* symbol_;
  double price_;
  ::google::protobuf::int32 size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_fill_2eproto();
  friend void protobuf_AssignDesc_fill_2eproto();
  friend void protobuf_ShutdownFile_fill_2eproto();
  
  void InitAsDefaultInstance();
  static Fill* default_instance_;
};
// ===================================================================


// ===================================================================

// Fill

// required double timestamp = 1;
inline bool Fill::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fill::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fill::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fill::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Fill::timestamp() const {
  return timestamp_;
}
inline void Fill::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string symbol = 2;
inline bool Fill::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fill::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fill::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fill::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& Fill::symbol() const {
  return *symbol_;
}
inline void Fill::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Fill::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Fill::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fill::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* Fill::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required double price = 3;
inline bool Fill::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fill::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fill::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fill::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double Fill::price() const {
  return price_;
}
inline void Fill::set_price(double value) {
  set_has_price();
  price_ = value;
}

// required int32 size = 4;
inline bool Fill::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fill::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fill::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fill::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Fill::size() const {
  return size_;
}
inline void Fill::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fill_2eproto__INCLUDED
